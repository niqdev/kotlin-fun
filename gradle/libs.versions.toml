[versions]
kotlin = "1.9.22"
ktor = "2.3.8"
hoplite = "2.7.5"
kondor = "2.1.2"
confluent = "7.3.3" # FIXME 7.4.0
log4j = "2.22.0"
flyway = "10.1.0"
# tests
kotest = "5.8.0"

[libraries]
kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version = "1.7.3" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version = "1.6.1" }

# logging
slf4j-api = { module = "org.slf4j:slf4j-api", version = "2.0.9" }
logback-classic = { module = "ch.qos.logback:logback-classic", version = "1.4.13" }
log4j-api = { module = "org.apache.logging.log4j:log4j-api", version.ref = "log4j" }
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
log4j-slf4j = { module = "org.apache.logging.log4j:log4j-slf4j-impl", version.ref = "log4j" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging-jvm", version = "5.1.1" }

# config
hoplite-core = { module = "com.sksamuel.hoplite:hoplite-core", version.ref = "hoplite" }
hoplite-yaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }

# json
kondor-core = { module = "com.ubertob.kondor:kondor-core", version.ref = "kondor" }
kondor-tools = { module = "com.ubertob.kondor:kondor-tools", version.ref = "kondor" }
jackson-module = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version = "2.16.1" }
zjsonpatch = { module = "com.flipkart.zjsonpatch:zjsonpatch", version = "0.4.16" }
everit-json-schema = { module = "com.github.erosb:everit-json-schema", version = "1.14.3" }
json-kotlin-schema = { module = "net.pwall.json:json-kotlin-schema", version = "0.42" }

# other
clikt = { module = "com.github.ajalt.clikt:clikt", version = "4.2.1" }
jdom = { module = "org.jdom:jdom2", version = "2.0.6.1" }

# reactor
reactor-core = { module = "io.projectreactor:reactor-core", version = "3.6.2" }
reactor-kotlin = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version = "1.2.2" }

# arrow
arrow-stack = { module = "io.arrow-kt:arrow-stack", version = "1.2.1" }
arrow-core = { module = "io.arrow-kt:arrow-core" }

# aws
aws-v2-bom = { module = "software.amazon.awssdk:bom", version = "2.23.12" }
aws-v2-lambda = { module = "software.amazon.awssdk:lambda" }
aws-v2-s3 = { module = "software.amazon.awssdk:s3" }
aws-v2-sqs = { module = "software.amazon.awssdk:sqs" }
aws-lambda-core = { module = "com.amazonaws:aws-lambda-java-core", version = "1.2.3" }
aws-lambda-events = { module = "com.amazonaws:aws-lambda-java-events", version = "3.11.3" }
aws-lambda-log4j2 = { module = "com.amazonaws:aws-lambda-java-log4j2", version = "1.6.0" }
aws-kotlin-lambda = { module = "aws.sdk.kotlin:lambda", version = "1.0.47" }

# http
ktor-bom = { module = "io.ktor:ktor-bom", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core-jvm" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty-jvm" }
ktor-server-logging = { module = "io.ktor:ktor-server-call-logging" }
ktor-server-content = { module = "io.ktor:ktor-server-content-negotiation" }
ktor-server-openapi = { module = "io.ktor:ktor-server-openapi" }
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger" }
ktor-client-content = { module = "io.ktor:ktor-client-content-negotiation" }
ktor-jackson = { module = "io.ktor:ktor-serialization-jackson" }
ktor-server-tests = { module = "io.ktor:ktor-server-tests-jvm" }

# database
jdbi-bom = { module = "org.jdbi:jdbi3-bom", version = "3.42.0" }
jdbi-core = { module = "org.jdbi:jdbi3-core" }
jdbi-postgres = { module = "org.jdbi:jdbi3-postgres" }
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-postgres = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
driver-postgres = { module = "org.postgresql:postgresql", version = "42.7.0" }

# confluent
kafka-schema-provider = { module = "io.confluent:kafka-json-schema-provider", version.ref = "confluent" }
kafka-schema-registry = { module = "io.confluent:kafka-schema-registry", version.ref = "confluent" }

# tests
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-assertions-json = { module = "io.kotest:kotest-assertions-json", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-kafka = { module = "io.kotest.extensions:kotest-extensions-embedded-kafka", version = "2.0.0" }

junit-bom = { module = "org.junit:junit-bom", version = "5.10.1" }
junit-core = { module = "org.junit.jupiter:junit-jupiter" }
junit-api = { module = "org.junit.jupiter:junit-jupiter-api" }
mockk = { module = "io.mockk:mockk", version = "1.13.8" }

testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version = "1.19.3" }
testcontainers-core = { module = "org.testcontainers:testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter" }
testcontainers-postgres = { module = "org.testcontainers:postgresql" }

[bundles]
hoplite = [ "hoplite-core", "hoplite-yaml" ]
ktor-server = [ "ktor-server-core", "ktor-server-netty", "ktor-server-logging", "ktor-server-content", "ktor-server-openapi", "ktor-server-swagger" ]
ktor-client = [ "ktor-client-content" ]
junit = [ "junit-core", "junit-api" ]
testcontainers = [ "testcontainers-core", "testcontainers-junit", "testcontainers-postgres" ]

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlinter = { id = "org.jmailen.kotlinter", version = "3.10.0" } # FIXME 3.12.0
test-logger = { id = "com.adarshr.test-logger", version = "4.0.0" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
shadow = { id = "com.github.johnrengelman.shadow", version = "8.1.1" }
